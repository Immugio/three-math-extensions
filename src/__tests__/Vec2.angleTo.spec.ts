import { Vec2 } from "../Vec2";

describe('Vec2', () => {
    // Generated by CodiumAI

    describe('angleTo', () => {

        it('should return the correct angle when vectors have positive x-axis', () => {
            const vec1 = new Vec2(1, 0);
            const vec2 = new Vec2(0, 1);
            const expectedAngle = Math.PI / 2;

            const result = vec1.angleTo(vec2);

            expect(result).toBeCloseTo(expectedAngle);
        });

        it('should return the correct angle when vectors have negative x-axis', () => {
            const vec1 = new Vec2(-1, 0);
            const vec2 = new Vec2(0, 1);
            const expectedAngle = Math.PI / 2;

            const result = vec1.angleTo(vec2);

            expect(result).toBeCloseTo(expectedAngle);
        });

        it('should return the correct angle when vectors have positive y-axis', () => {
            const vec1 = new Vec2(0, 1);
            const vec2 = new Vec2(1, 0);
            const expectedAngle = Math.PI / 2;

            const result = vec1.angleTo(vec2);

            expect(result).toBeCloseTo(expectedAngle);
        });

        it('should return the correct angle when vectors have negative y-axis', () => {
            const vec1 = new Vec2(0, -1);
            const vec2 = new Vec2(1, 0);
            const expectedAngle = Math.PI / 2;

            const result = vec1.angleTo(vec2);

            expect(result).toBeCloseTo(expectedAngle);
        });

        it('should return the correct angle when vectors have different x and y values', () => {
            const vec1 = new Vec2(1, 1);
            const vec2 = new Vec2(-1, 1);
            const expectedAngle = Math.PI / 2;

            const result = vec1.angleTo(vec2);

            expect(result).toBeCloseTo(expectedAngle);
        });

        it('should return 0 when the two vectors are the same', () => {
            const vec1 = new Vec2(1, 0);
            const vec2 = new Vec2(1, 0);
            const expectedAngle = 0;

            const result = vec1.angleTo(vec2);

            expect(result).toBeCloseTo(expectedAngle);
        });

        it('should return Math.PI when the two vectors are the opposite direction', () => {
            const vec1 = new Vec2(1, 0);
            const vec2 = new Vec2(-1, 0);
            const expectedAngle = Math.PI;

            const result = vec1.angleTo(vec2);

            expect(result).toBeCloseTo(expectedAngle);
        });
    });

});
